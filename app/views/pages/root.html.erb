<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
  <meta charset="utf-8">
  <title>Orbital Defence</title>
  <style>
    /* Always set the map height explicitly to define the size of the div
     * element that contains the map. */
    #map {
      height: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
  </style>
</head>
<body>
<div id="map"></div>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>
    var map;
    var googleMaps;
    var activeWindArrows = [];

    const detectedAtWindArrow = (fire) => {
      return new google.maps.Polyline({
          path: [
              {lat: fire.fire.latitude, lng: fire.fire.longitude},
              {lat: fire.detected_wind_arrow.lat, lng: fire.detected_wind_arrow.lng}
          ],
          icons: [{
              icon: { path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW },
              offset: '100%'
          }],
          strokeColor: '#999999',
          strokeOpacity: 0.8,
          strokeWeight: 2
      });
  };

  const currentWindDirection = (windArrow, googleMaps) => {
      return new googleMaps.Polyline({
          path: [
              { lat: windArrow.fire.lat, lng: windArrow.fire.lng },
              { lat: windArrow.wind.lat, lng: windArrow.wind.lng  }
          ],
          icons: [{
              icon: { path: googleMaps.SymbolPath.FORWARD_CLOSED_ARROW },
              offset: '100%'
          }],
          strokeColor: '#6975ff',
          strokeOpacity: 0.8,
          strokeWeight: 3
      });
  };

  async function fetchWeatherReading(readingId) {
      const response = await axios.get(`<%= Rails.env.production? ? 'https://api.orbitaldefence.tech/' : 'http://localhost:5000'%>/api/v1/weather_readings/${readingId}`);
      const data = await response.data;
      return data;
  };

  async function firesData() {
      const response = await axios.get('<%= Rails.env.production? ? 'https://api.orbitaldefence.tech/' : 'http://localhost:5000'%>/api/v1/fires/?sw_bound_point=-39.840939,112.913654&ne_bound_point=-11.332735,154.103939');
      const data = await response.data;
      return data;

  };

  async function firesWindDataInBound(swLatLng, neLatLng) {
      const response = await axios.get(`<%= Rails.env.production? ? 'https://api.orbitaldefence.tech/' : 'http://localhost:5000'%>/api/v1/fires/windIndicators/?sw_bound_point=${swLatLng}&ne_bound_point=${neLatLng}`);
      const data = await response.data;
      return data;

  };

  const marker = (fire) => {
    const location = { lat: fire.latitude, lng: fire.longitude};
    // const currentWindDirectionArrow = currentWindDirection(fire);
    // const detectedAtWindDirectionArrow = detectedAtWindArrow(fire);

    const marker = new googleMaps.Marker({
        position: location,
        icon: { url: "https://cdn3.iconfinder.com/data/icons/mapicons/icons/fire.png" }
    });

    googleMaps.event.addDomListener(marker, "click", function() {
        openInfoWindow(marker, fire);
    });

    return marker;
  };

  const populateMarkers = () => {
    firesData().then( fires => {
      let markers = [];

      fires.map(function(fire, i) {
          markers.push(marker(fire));
      });

      new MarkerClusterer(map, markers,
          {
            imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m',
            minimumClusterSize: 20
          }
      );
    });
  };

  const showWindArrows = () => {
      var bounds =  map.getBounds();
      var ne = bounds.getNorthEast();
      var sw = bounds.getSouthWest();

      var swLatLng = `${sw.lat()},${sw.lng()}`;
      var neLatLng = `${ne.lat()},${ne.lng()}`;

      firesWindDataInBound(swLatLng, neLatLng).then(windArrows => {
          activeWindArrows = windArrows.map(function(windArrow) {
              return currentWindDirection(windArrow, googleMaps);
          });

          activeWindArrows.forEach( arrow => arrow.setMap(map));
      })
  };

  const hideWindArrows = () => {
    if (activeWindArrows.length > 0) {
      activeWindArrows.forEach((arrow) => {
          arrow.setMap(null)
      });
      activeWindArrows = [];
    }
  };

  const openInfoWindow = (marker, fire) =>{
      fetchWeatherReading(fire.weather_reading_id).then(reading => {
          const infowindow = new googleMaps.InfoWindow({
              content: infoContent(fire, reading)
          });

          infowindow.open(map, marker);
      });
  };

  const infoContent = (fire, reading) => {
    return `
      <div>
        <b>Fire</b><br/>
        Type: ${fire.scan_type}<br />
        Date: ${fire.detected_at}<br />
        Confidence: ${fire.confidence}
        <hr />
        <b>Weather</b><br/>
        ${reading.identifier}<br />
        Temp: ${reading.temprature} C <br />
        Wind Speed: ${reading.wind_speed} km/h<br />
        Wind Direction: ${reading.wind_direction}<br />
        Humidity: ${reading.humidity}
      </div>
    `;
  };

  function ShowWindControl(controlDiv) {

      // Set CSS for the control border.
      var controlUI = document.createElement('div');
      controlUI.style.backgroundColor = '#6975ff';
      controlUI.style.border = '2px solid #6975ff';
      controlUI.style.borderRadius = '3px';
      controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
      controlUI.style.cursor = 'pointer';
      controlUI.style.marginBottom = '22px';
      controlUI.style.textAlign = 'center';
      controlUI.title = 'Show Current Wind Direction';
      controlDiv.appendChild(controlUI);

      // Set CSS for the control interior.
      var controlText = document.createElement('div');
      controlText.style.color = 'rgb(255,255,255)';
      controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
      controlText.style.fontSize = '16px';
      controlText.style.lineHeight = '38px';
      controlText.style.paddingLeft = '5px';
      controlText.style.paddingRight = '5px';
      controlText.innerHTML = 'Show Current Wind Direction';
      controlUI.appendChild(controlText);

      controlUI.addEventListener('click', function() {
          showWindArrows();
      });

  }

    function HideWindControl(controlDiv) {
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
        controlUI.style.cursor = 'pointer';
        controlUI.style.marginBottom = '22px';
        controlUI.style.textAlign = 'center';
        controlUI.title = 'Hide Current Wind Direction';
        controlDiv.appendChild(controlUI);

        var controlText = document.createElement('div');
        controlText.style.color = 'rgb(25,25,25)';
        controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
        controlText.style.fontSize = '16px';
        controlText.style.lineHeight = '38px';
        controlText.style.paddingLeft = '5px';
        controlText.style.paddingRight = '5px';
        controlText.innerHTML = 'Hide Current Wind Direction';
        controlUI.appendChild(controlText);

        controlUI.addEventListener('click', function() {
            hideWindArrows();
        });

    }

    function windControls() {
      var showWindControlDiv = document.createElement('div');
      var showWindControl = new ShowWindControl(showWindControlDiv, map);

      showWindControl.index = 1;
      map.controls[google.maps.ControlPosition.RIGHT_CENTER].push(showWindControlDiv);

      var hideWindControlDiv = document.createElement('div');
      var hideWindControl = new HideWindControl(hideWindControlDiv, map);

      hideWindControl.index = 2;
      map.controls[google.maps.ControlPosition.RIGHT_CENTER].push(hideWindControlDiv);
    }

    function initMap() {
      googleMaps = google.maps;
      map = new google.maps.Map(document.getElementById('map'), {
          zoom: 5,
          center: { lat: -25.263290, lng: 134.337539 }
      });

      populateMarkers();
      windControls()
  }
</script>
<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js">
</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDP9kbCnPT5Q6FcZPAPfmuqILX9Xw7EBRg&callback=initMap">
</script>
</body>
</html>